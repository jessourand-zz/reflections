What happens when you initialize a repository? Why do you need to do it?
    When you initialize a repository, Git creates a .git file for all your
    commits to be logged thereafter.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
    The staging area is for files to be added from the working directory before
    they are committed. Multiple files can be added to the staging area and
    committed together, if logically connected. The repository is a collection of
    all files that have been committed.

How can you use the staging area to make sure you have one commit per logical
change?
    You can use the staging area to stage one particular file, or multiple files,
    if they have been updated and follow one logical change. Then, when they
    have all been added to the staging area together, they can be committed
    at one time together.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
    In cases of collaborating, or adding a new feature where you're afraid it
    might mess up the program, you can confidently add a branch and rework from
    there.

How do the diagrams help you visualize the branch structure?
    It is useful to visualize that all commits can lead back to parents.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
    Merging branches will keep the edits from two branches, where they differed
    from the parent commit. (The last commit from where they branched)

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
    Automatic merging is nice because Git can see where the file has been
    changed, and can incorporate multiple changes in one merge. However,
    If the same section of code has been modified in multiple branches, Git
    will ask that you manually decide which parts to keep/discard into the new
    merge.
